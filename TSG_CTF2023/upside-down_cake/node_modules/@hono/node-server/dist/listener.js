"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var listener_exports = {};
__export(listener_exports, {
  getRequestListener: () => getRequestListener
});
module.exports = __toCommonJS(listener_exports);
var import_node_stream = require("node:stream");
var import_promises = require("node:stream/promises");
var import_globals = require("./globals");
const getRequestListener = (fetchCallback) => {
  return async (incoming, outgoing) => {
    const method = incoming.method || "GET";
    const url = `http://${incoming.headers.host}${incoming.url}`;
    const headerRecord = [];
    const len = incoming.rawHeaders.length;
    for (let i = 0; i < len; i += 2) {
      headerRecord.push([incoming.rawHeaders[i], incoming.rawHeaders[i + 1]]);
    }
    const init = {
      method,
      headers: headerRecord
    };
    if (!(method === "GET" || method === "HEAD")) {
      init.body = import_node_stream.Readable.toWeb(incoming);
      init.duplex = "half";
    }
    let res;
    try {
      res = await fetchCallback(new Request(url.toString(), init));
    } catch (e) {
      res = new Response(null, { status: 500 });
      if (e instanceof Error) {
        if (e.name === "TimeoutError" || e.constructor.name === "TimeoutError") {
          res = new Response(null, { status: 504 });
        }
      }
    }
    const contentType = res.headers.get("content-type") || "";
    const buffering = res.headers.get("x-accel-buffering") || "";
    const contentEncoding = res.headers.get("content-encoding");
    const contentLength = res.headers.get("content-length");
    const transferEncoding = res.headers.get("transfer-encoding");
    for (const [k, v] of res.headers) {
      if (k === "set-cookie") {
        outgoing.setHeader(k, res.headers.getSetCookie(k));
      } else {
        outgoing.setHeader(k, v);
      }
    }
    outgoing.statusCode = res.status;
    if (res.body) {
      try {
        if (contentEncoding || transferEncoding || contentLength || /^no$/i.test(buffering) || !/^(application\/json\b|text\/(?!event-stream\b))/i.test(contentType)) {
          await (0, import_promises.pipeline)(import_node_stream.Readable.fromWeb(res.body), outgoing);
        } else {
          const text = await res.text();
          outgoing.setHeader("Content-Length", Buffer.byteLength(text));
          outgoing.end(text);
        }
      } catch (e) {
        const err = e instanceof Error ? e : new Error("unknown error", { cause: e });
        if (err.code === "ERR_STREAM_PREMATURE_CLOSE") {
          console.info("The user aborted a request.");
        } else {
          console.error(e);
          outgoing.destroy(err);
        }
      }
    } else {
      outgoing.end();
    }
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getRequestListener
});
