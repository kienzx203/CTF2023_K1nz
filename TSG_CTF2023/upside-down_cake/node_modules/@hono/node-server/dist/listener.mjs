// src/listener.ts
import { Readable } from "node:stream";
import { pipeline } from "node:stream/promises";
import "./globals.mjs";
var getRequestListener = (fetchCallback) => {
  return async (incoming, outgoing) => {
    const method = incoming.method || "GET";
    const url = `http://${incoming.headers.host}${incoming.url}`;
    const headerRecord = [];
    const len = incoming.rawHeaders.length;
    for (let i = 0; i < len; i += 2) {
      headerRecord.push([incoming.rawHeaders[i], incoming.rawHeaders[i + 1]]);
    }
    const init = {
      method,
      headers: headerRecord
    };
    if (!(method === "GET" || method === "HEAD")) {
      init.body = Readable.toWeb(incoming);
      init.duplex = "half";
    }
    let res;
    try {
      res = await fetchCallback(new Request(url.toString(), init));
    } catch (e) {
      res = new Response(null, { status: 500 });
      if (e instanceof Error) {
        if (e.name === "TimeoutError" || e.constructor.name === "TimeoutError") {
          res = new Response(null, { status: 504 });
        }
      }
    }
    const contentType = res.headers.get("content-type") || "";
    const buffering = res.headers.get("x-accel-buffering") || "";
    const contentEncoding = res.headers.get("content-encoding");
    const contentLength = res.headers.get("content-length");
    const transferEncoding = res.headers.get("transfer-encoding");
    for (const [k, v] of res.headers) {
      if (k === "set-cookie") {
        outgoing.setHeader(k, res.headers.getSetCookie(k));
      } else {
        outgoing.setHeader(k, v);
      }
    }
    outgoing.statusCode = res.status;
    if (res.body) {
      try {
        if (contentEncoding || transferEncoding || contentLength || /^no$/i.test(buffering) || !/^(application\/json\b|text\/(?!event-stream\b))/i.test(contentType)) {
          await pipeline(Readable.fromWeb(res.body), outgoing);
        } else {
          const text = await res.text();
          outgoing.setHeader("Content-Length", Buffer.byteLength(text));
          outgoing.end(text);
        }
      } catch (e) {
        const err = e instanceof Error ? e : new Error("unknown error", { cause: e });
        if (err.code === "ERR_STREAM_PREMATURE_CLOSE") {
          console.info("The user aborted a request.");
        } else {
          console.error(e);
          outgoing.destroy(err);
        }
      }
    } else {
      outgoing.end();
    }
  };
};
export {
  getRequestListener
};
