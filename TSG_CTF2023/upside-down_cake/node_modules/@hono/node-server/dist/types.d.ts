/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import type { createServer, Server, ServerOptions as HttpServerOptions } from 'node:http';
import type { createServer as createHttpsServer, ServerOptions as HttpsServerOptions } from 'node:https';
import type { createSecureServer as createSecureHttp2Server, createServer as createHttp2Server, Http2Server, Http2SecureServer, SecureServerOptions as SecureHttp2ServerOptions, ServerOptions as Http2ServerOptions } from 'node:http2';
export declare type FetchCallback = (request: Request) => Promise<unknown> | unknown;
export declare type NextHandlerOption = {
    fetch: FetchCallback;
};
export declare type ServerType = Server | Http2Server | Http2SecureServer;
declare type createHttpOptions = {
    serverOptions?: HttpServerOptions;
    createServer?: typeof createServer;
};
declare type createHttpsOptions = {
    serverOptions?: HttpsServerOptions;
    createServer?: typeof createHttpsServer;
};
declare type createHttp2Options = {
    serverOptions?: Http2ServerOptions;
    createServer?: typeof createHttp2Server;
};
declare type createSecureHttp2Options = {
    serverOptions?: SecureHttp2ServerOptions;
    createServer?: typeof createSecureHttp2Server;
};
declare type ServerOptions = createHttpOptions | createHttpsOptions | createHttp2Options | createSecureHttp2Options;
export declare type Options = {
    fetch: FetchCallback;
    port?: number;
    hostname?: string;
} & ServerOptions;
export {};
